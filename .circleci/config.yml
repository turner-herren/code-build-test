version: 2.1
insights:
  performance: true

parameters:
  is_create_new_task:
    default: false
    type: boolean
  new_task_subnet:
    default: subnet-a8f912c1
    type: string
  new_task_security_id:
    default: "sg-05c75b4dbf2f83579,sg-c151aea8"
    type: string
  is_develop_deploy:
    default: false
    type: boolean
  aws_credential_name:
    default: AWS_CREDENTIAL
    type: string
  cluster_name:
    default: code-build-test
    type: string
  task_name:
    default: code-build-test-task
    type: string
  service_name:
    default: code-build-test-service
    type: string
  image_name:
    default: code-build-test
    type: string

orbs:
  aws-ecr: circleci/aws-ecr@8.2.1
  aws-ecs: circleci/aws-ecs@3.2.0
  aws-cli: circleci/aws-cli@3.1.4

executors:
  build-executor:
    docker:
      - image: gradle:7.6.1-jdk17@sha256:37d0d2809d0f0d58e114f6b4bcc872731b0985bbe0bf8f3592935c03953cc973
    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

jobs:
  test-build:
    executor: build-executor
    working_directory: ~/code-build-test
    steps:
      - checkout
      - restore_cache:
          key: gradle-cache-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - run: echo 'export ECS_IMAGE_NAME="container=<< pipeline.parameters.image_name >>,tag=latest"' >> "$BASH_ENV"
      - run: ./gradlew test
      - store_test_results:
          path: build/test-results/test

      - run: ./gradlew build
      - save_cache:
          key: gradle-cache-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
          paths:
            - .gradle/
      - store_artifacts:
          path: build/libs/
      - persist_to_workspace:
          root: .
          paths:
            - .
  create-new-task:
    docker:
      - image: 'cimg/python:3.10'
    steps:
      - run: |
          echo '{
            \"family\": \"<< pipeline.parameters.task_name >>\",
            \"containerDefinitions\": [
              {
                \"name\": \"<< pipeline.parameters.task_name >>\",
                \"image\": \"248704842720.dkr.ecr.ap-northeast-2.amazonaws.com/<< pipeline.parameters.image_name>>:latest\",
                \"portMappings\": [
                  {
                    \"name\": \"<< pipeline.parameters.task_name >>-port\",
                    \"containerPort\": 8080,
                    \"hostPort\": 8080,
                    \"protocol\": \"tcp\",
                    \"appProtocol\": \"http\"
                  }
                ],
                \"essential\": true,
                \"logConfiguration\": {
                  \"logDriver\": \"awslogs\",
                  \"options\": {
                    \"awslogs-create-group\": \"true\",
                    \"awslogs-group\": \"/ecs/code-build-test-task\",
                    \"awslogs-region\": \"ap-northeast-2\",
                    \"awslogs-stream-prefix\": \"ecs\"
                  }
                }
              }
            ],
            \"requiresCompatibilities\": [
              \"FARGATE\"
            ],
            \"cpu\": \"1024\",
            \"memory\": \"2048\",
            \"taskRoleArn\": \"arn:aws:iam::248704842720:role/ecsTaskExecutionRole\",
            \"executionRoleArn\": \"arn:aws:iam::248704842720:role/ecsTaskExecutionRole\",
            \"networkMode\": \"awsvpc\",
            \"runtimePlatform\": {
              \"cpuArchitecture\": \"X86_64\",
              \"operatingSystemFamily\": \"LINUX\"
            }
          }' >> definition.json
      - aws-cli/setup
      - run: sed 's/\\"/"/g' definition.json > task_definition.json
      - run: cat task_definition.json
      - run: aws ecs register-task-definition --cli-input-json file://task_definition.json

  create-new-service:
    docker:
      - image: 'cimg/python:3.10'
    steps:
      - run: aws ecs create-service --cluster << pipeline.parameters.cluster_name >> --service-name << pipeline.parameters.service_name >> --task-definition << pipeline.parameters.task_name >> --desired-count 1 --launch-type FARGATE_SPOT
      #- aws-ecs/run-task:
      #    capacity-provider-strategy: >-
      #      capacityProvider=FARGATE_SPOT,weight=1
      #    assign-public-ip: "ENABLED"
      #    launch-type: ''
      #    group: << pipeline.parameters.service_name >>
      #    cluster: << pipeline.parameters.cluster_name >>
      #    subnet-ids: << pipeline.parameters.new_task_subnet >>
      #    security-group-ids: << pipeline.parameters.new_task_security_id >>
      #    task-definition: << pipeline.parameters.task_name >>
workflows:
  version: 2
  create-task:
    when:
      and:
        - equal: [ true, << pipeline.parameters.is_create_new_task >> ]
        - equal: [ false, << pipeline.parameters.is_develop_deploy >> ]
        - not: [ main, << pipeline.git.branch >> ]
    jobs:
      - test-build
      - aws-ecr/build-and-push-image:
          name: push-image
          requires:
            - test-build
          context: << pipeline.parameters.aws_credential_name >>
          checkout: false
          attach-workspace: true
          workspace-root: .
          repo: << pipeline.parameters.image_name >>
          tag: 'latest'
      - create-new-task:
          context: << pipeline.parameters.aws_credential_name >>
          requires:
            - push-image
      - create-new-service:
          context: << pipeline.parameters.aws_credential_name >>
          requires:
            - create-new-task
      - aws-ecs/deploy-service-update:
          name: deploy-service
          requires:
            - create-new-service
          context: AWS_CREDENTIAL
          cluster: << pipeline.parameters.cluster_name >>
          family: << pipeline.parameters.task_name >>
          service-name: << pipeline.parameters.service_name >>
          container-image-name-updates: ${ECS_IMAGE_NAME}
  build-deploy:
    when:
      or:
        - equal: [ main, << pipeline.git.branch >> ]
        - equal: [ true, << pipeline.parameters.is_develop_deploy >> ]
    jobs:
      - test-build
      - aws-ecr/build-and-push-image:
          name: push-image
          requires:
            - test-build
          create-repo: true
          context: << pipeline.parameters.aws_credential_name >>
          checkout: false
          attach-workspace: true
          workspace-root: .
          repo: << pipeline.parameters.image_name >>
          tag: 'latest'
      - aws-ecs/deploy-service-update:
          name: deploy-service
          requires:
            - push-image
          context: AWS_CREDENTIAL
          cluster: << pipeline.parameters.cluster_name >>
          family: << pipeline.parameters.task_name >>
          service-name: << pipeline.parameters.service_name >>
          container-image-name-updates: ${ECS_IMAGE_NAME}